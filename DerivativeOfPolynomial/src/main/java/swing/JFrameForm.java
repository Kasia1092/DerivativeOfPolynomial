/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


/**
 * This is the program that calculates the derivative of a polynomial. It 
 * allows you to add elements to your polynomial. It shows you elements of the polynomial
 * that you give and the derivative of this polynomial.
 * @author Katarzyna Rakoczy 
 * @version 3.0
 */

package swing;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import rakoczy.models.Calculations;
import rakoczy.models.Polynomial;
import rakoczy.models.Derivative;
import rakoczy.models.PolynomialExceptions;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 * The main JFrameForm class represents the GUI application for calculating the derivative of a polynomial.
 * Users can input polynomial parameters, calculate its derivative, and view the results.
 * The application provides a history feature to display past calculations.
 * Custom exceptions handle errors related to input validation.
 * @author Katarzyna Rakoczy 
 * @version 3.0
 */
public class JFrameForm extends javax.swing.JFrame {
     
   /**
    * Node used to organize the history tree structure. The polynomialsNode
    * represents a category for polynomial entries.
    */
    private DefaultMutableTreeNode polynomialsNode;
    /**
     * Node used to organize the history tree structure. The derivativesNode
    * represents a category for derivative entries.
     */
    private DefaultMutableTreeNode derivativesNode;
    
    /**
     * Creates new form JFrameForm
     */
    public JFrameForm() {
        initComponents();
        initializeTreeNodes();
        
        InputMap inputMap = calculateButton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK), "calculateAction");

        ActionMap actionMap = calculateButton.getActionMap();
        actionMap.put("calculateAction", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                calculateButtonActionPerformed(e);
            }
        });
        
        InputMap inputMapReset = resetButton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMapReset.put(KeyStroke.getKeyStroke(KeyEvent.VK_R, KeyEvent.CTRL_DOWN_MASK), "resetAction");

        ActionMap actionMapReset = resetButton.getActionMap();
        actionMapReset.put("resetAction", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                resetButtonActionPerformed(e);
            }
        });
        
      
    }
    
    /**
    * Initialize tree nodes for polynomials and derivatives in the JTree.
    */
    private void initializeTreeNodes() {
        polynomialsNode = new DefaultMutableTreeNode("Polynomials");
        derivativesNode = new DefaultMutableTreeNode("Derivatives");

        DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode) jTree1.getModel().getRoot();
        rootNode.add(polynomialsNode);
        rootNode.add(derivativesNode);
    }
    
    /**
    * Add a polynomial to the history tree.
    * @param polynomial The polynomial to be added to the tree.
    */
    private void addPolynomialToTree(String polynomial) {
        DefaultMutableTreeNode polynomialNode = new DefaultMutableTreeNode("Polynomial: " + polynomial);
        polynomialsNode.add(polynomialNode);
        ((DefaultTreeModel) jTree1.getModel()).reload();
    }

    /**
    * Add a derivative to the history tree.
    * @param derivative The derivative to be added to the tree.
    */
    private void addDerivativeToTree(String derivative) {
        DefaultMutableTreeNode derivativeNode = new DefaultMutableTreeNode("Derivative: " + derivative);
        derivativesNode.add(derivativeNode);
        ((DefaultTreeModel) jTree1.getModel()).reload();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        calculateButton = new javax.swing.JButton();
        addTextLabel = new javax.swing.JLabel();
        addPolynomialField = new javax.swing.JTextField();
        getTextLabel = new javax.swing.JLabel();
        javax.swing.JLabel polynomialTextLabel = new javax.swing.JLabel();
        resetButton = new javax.swing.JButton();
        polynomialResultLabel = new javax.swing.JLabel();
        deriviativeResultLabel = new javax.swing.JLabel();
        addTextLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 102));

        calculateButton.setBackground(new java.awt.Color(0, 153, 0));
        calculateButton.setText("Calculate");
        calculateButton.setToolTipText("CTR+ENTER Click to view the result");
        calculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateButtonActionPerformed(evt);
            }
        });

        addTextLabel.setText("Add the values and powers of your polynomial:");

        addPolynomialField.setBackground(new java.awt.Color(153, 153, 153));
        addPolynomialField.setToolTipText("V1 P1 V2 P2 V3 P3 V4 P4 ....");

        getTextLabel.setText("The derivative of your polynomial:");

        polynomialTextLabel.setText("Your polynomial:");

        resetButton.setBackground(new java.awt.Color(204, 153, 0));
        resetButton.setText("Reset");
        resetButton.setToolTipText("CTL+R Click to reset the view");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        polynomialResultLabel.setBackground(new java.awt.Color(204, 204, 204));
        polynomialResultLabel.setForeground(new java.awt.Color(0, 102, 0));
        polynomialResultLabel.setText(".......");
        polynomialResultLabel.setToolTipText("Here is place where you can see your polynomial");

        deriviativeResultLabel.setForeground(new java.awt.Color(153, 102, 0));
        deriviativeResultLabel.setText(".......");
        deriviativeResultLabel.setToolTipText("Here is place where you can see derivative");

        addTextLabel1.setText(" value power value power... (with one space between them)");

        jTree1.setBackground(new java.awt.Color(153, 153, 153));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("History");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.setToolTipText("This is the history of your calculations.");
        jScrollPane1.setViewportView(jTree1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(addTextLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(addTextLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(polynomialResultLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(calculateButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(addPolynomialField)
                                .addComponent(polynomialTextLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(getTextLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(resetButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(deriviativeResultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(19, 19, 19))))
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addTextLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addTextLabel1)
                .addGap(18, 18, 18)
                .addComponent(addPolynomialField, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(calculateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(polynomialTextLabel)
                .addGap(18, 18, 18)
                .addComponent(polynomialResultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(getTextLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deriviativeResultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
  
     /**
     * Handle the action when the "Calculate" button is clicked or when the shortcut (Ctrl+ENTER) is activated.
     * It calculates the derivative of the polynomial provided by the user.
     * @param evt The action event.
     */
    private void calculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateButtonActionPerformed
        
        Polynomial polynomialModel = new Polynomial(); 
        Derivative deriviativeModel = new Derivative(); 
        Calculations calculations = new Calculations();
               
        String text = addPolynomialField.getText().trim();
                
        try {
        if (text.isEmpty()) {
            throw new PolynomialExceptions("Add more parameters!");
        } else {
            String[] parametersArray = text.split(" ");

            int value, power;
            int size = parametersArray.length;

            if (!new PolynomialExceptions().isEven(size)) {
                // Throw an exception if the number of parameters is not even
            }

            for (int i = 0; i < size; i++) {
                if ((i % 2) == 0) {
                    value = Integer.parseInt(parametersArray[i]);
                    power = Integer.parseInt(parametersArray[i + 1]);
                    
                           if (!new PolynomialExceptions().isWholeNumber(power)) {
                        // Throw an exception if the power is not a whole number
                    }
                    polynomialModel.addToArray(value, power);
                }
            }

            calculations.derivativeCalculation(polynomialModel.getList(), deriviativeModel.getList());

            int polynomialSize = polynomialModel.getListSize();
            StringBuilder polyResult = new StringBuilder();
            for (int i = 0; i < polynomialSize; i++) {
                int elementValue = polynomialModel.listValuesResults(i);
                int elementPower = polynomialModel.listPowerResults(i);

                if (i > 0 && i < polynomialSize) {
                    if (elementValue >= 0) {
                        polyResult.append("+");
                    }
                }
                polyResult.append(String.format("%dx^%d", elementValue, elementPower));
            }

            int derivativeSize = deriviativeModel.getListSize();
            StringBuilder derivResult = new StringBuilder();
            for (int i = 0; i < derivativeSize; i++) {
                int elementValue = deriviativeModel.listValuesResults(i);
                int elementPower = deriviativeModel.listPowerResults(i);

                if (i > 0 && i < derivativeSize) {
                    if (elementValue >= 0) {
                        derivResult.append("+");
                    }
                }
                derivResult.append(String.format("%dx^%d", elementValue, elementPower));
            }

            polynomialResultLabel.setText(polyResult.toString());
            deriviativeResultLabel.setText(derivResult.toString());

            addPolynomialToTree(polyResult.toString());
            addDerivativeToTree(derivResult.toString());
        }
    } catch (PolynomialExceptions ex) {
        JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Invalid input format.", "Error", JOptionPane.ERROR_MESSAGE);
    }
        
    }//GEN-LAST:event_calculateButtonActionPerformed

    /**
    * Handle the action when the "Reset" button is clicked or when the shortcut (Ctrl+R) is activated.
    * It resets the input field and result labels.
    * @param evt The action event.
    */
    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        addPolynomialField.setText("");
        polynomialResultLabel.setText(".......");
        deriviativeResultLabel.setText(".......");
    }//GEN-LAST:event_resetButtonActionPerformed

    
   
    
    /**
     * The main method of the application, responsible for launching the JFrameForm GUI.
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addPolynomialField;
    private javax.swing.JLabel addTextLabel;
    private javax.swing.JLabel addTextLabel1;
    private javax.swing.JButton calculateButton;
    private javax.swing.JLabel deriviativeResultLabel;
    private javax.swing.JLabel getTextLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    private javax.swing.JLabel polynomialResultLabel;
    private javax.swing.JButton resetButton;
    // End of variables declaration//GEN-END:variables
}
